<!DOCTYPE html>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<html>
    <head>
        <meta charset="UTF-8">
        <title></title>
        <script src="public/js/jquery-3.4.1.min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
       function fileToByteArray(file) {
    return new Promise((resolve, reject) => {
        try {
            let reader = new FileReader();
            let fileByteArray = [];
            reader.readAsArrayBuffer(file);
            reader.onloadend = (evt) => {
                if (evt.target.readyState == FileReader.DONE) {
                    let arrayBuffer = evt.target.result,
                        array = new Uint8Array(arrayBuffer);
                    for (byte of array) {
                        fileByteArray.push(byte);
                    }
                }
                resolve(fileByteArray);
            }
        }
        catch (e) {
            reject(e);
        } 
    })
}


function dataURLtoFile(dataurl, filename) {
 
        var arr = dataurl.split(','),
            mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]), 
            n = bstr.length, 
            u8arr = new Uint8Array(n);
            
        while(n--){
            u8arr[n] = bstr.charCodeAt(n);
        }
        
        return new File([u8arr], filename, {type:mime});
    }

async function getByteArray() {
    //Get file from your input element
    let myFile = document.getElementById('myFileInput').files[0];

    //Wait for the file to be converted to a byteArray
    let byteArray = await fileToByteArray(myFile);

    //Do something with the byteArray
    console.log(byteArray);
    $('#file').text(byteArray);
    
    
    var file = dataURLtoFile('data:text/plain;base64,','hello.txt');
    var vvv = 'data:text/plain;base64,';
    exportToTxt(vvv, 'txt');
//        console.log(file);
//    var blob = new Blob([file], {type: "application/doc"});
//var link = document.createElement("a");
//link.href = window.URL.createObjectURL(blob);
//link.download = "myFileName.doc";
//link.click();
}

function exportToTxt(tile, exe){
     
     function download() {

    var fileContents = tile;//JSON.stringify(jsonObject, null, 2);
    var fileName = 'sss'//$('#Fname').text().toString().split('.txt')[0];

    var pp = document.createElement('a');
    pp.setAttribute('href', encodeURIComponent(fileContents));
    pp.setAttribute('download', fileName+"."+exe);
    pp.click();
  }
  setTimeout(function() {
    download()
  }, 500);
 }
 
 
 
 
 function createFile(){
var object = new ActiveXObject("Scripting.FileSystemObject");
var file = object.CreateTextFile("C:\\Hello.txt", false);
file.WriteLine('Hello World');
file.WriteLine('Hope is a thing with feathers, that perches on the soul.'); 
file.Close();
}



//////////////////////////
//return a promise that resolves with a File instance
function urltoFile(url, filename, mimeType){
    mimeType = mimeType || (url.match(/^data:([^;]+);/)||'')[1];
    return (fetch(url)
        .then(function(res){return res.arrayBuffer();})
        .then(function(buf){return new File([buf], filename, {type:mimeType});})
    );
}
var vvv = 'data:text/plain;base64,';
//Usage example:
urltoFile(vvv, 'a.txt')
.then(function(file){
    const files = new File([file], "c.txt" ,{type: 'text/plain'});
//    exportToTxt(file, '.txt');
//    console.log(file);
})
       </script>
       
       <input type="Button" value="Create File" onClick='createFile()'>
       <input id="myFileInput" type="file">    
       <button id="myBtn" type="button" onclick="getByteArray();">Try it</button>
<span id="file"></span>
 <?php
// document
$myfile = fopen("./icon/newfile.txt", "w") or die("Unable to open file!");
$txt = "John Doe\n";
fwrite($myfile, $txt);
$txt = "Jane Doe\n";
fwrite($myfile, $txt);
fclose($myfile);
?> 
    </body>
</html>
